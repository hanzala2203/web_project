    public function viewDashboardNew() {
        try {
            if (!isset($_SESSION['user_id'])) {
                header('Location: ' . BASE_URL . '/auth/login');
                exit;
            }
            $studentId = $_SESSION['user_id'];
            
            // Get student details from users table
            $student = $this->student->findById($studentId);
            if (!$student || $student['role'] !== 'student') {
                throw new \Exception("Student not found");
            }

            // Get data with fallbacks for missing functionality
            try {
                $interests = $this->student->getInterests($studentId);
            } catch (\Exception $e) {
                error_log("Error getting interests: " . $e->getMessage());
                $interests = [];
            }

            try {
                $enrolledCourses = $this->student->getEnrolledCourses($studentId);
            } catch (\Exception $e) {
                error_log("Error getting enrolled courses: " . $e->getMessage());
                $enrolledCourses = [];
            }

            try {
                $deadlines = $this->student->getUpcomingDeadlines($studentId);
            } catch (\Exception $e) {
                error_log("Error getting deadlines: " . $e->getMessage());
                $deadlines = [];
            }

            try {
                $interestedCourses = $this->student->getInterestedCourses($studentId);
            } catch (\Exception $e) {
                error_log("Error getting interested courses: " . $e->getMessage());
                $interestedCourses = [];
            }

            // Get optional data with null defaults
            $currentProgramme = $this->getCurrentProgramme($studentId) ?? null;
            $modulePrerequisites = $this->getModulePrerequisites($studentId) ?? [];
            $notifications = []; // Removed notification functionality temporarily
            $interestAnalytics = $this->getInterestAnalytics($studentId) ?? [];
            $recommendedProgrammes = method_exists($this->programme, 'getRecommendedProgrammes') ? 
                                   $this->programme->getRecommendedProgrammes($studentId) : [];

            // Calculate additional stats for display
            $enrolledCoursesCount = count($enrolledCourses);
            $completedCoursesCount = array_reduce($enrolledCourses, function($carry, $course) {
                return $carry + ($course['progress'] == 100 ? 1 : 0);
            }, 0);
            $overallProgress = $enrolledCoursesCount > 0 ? 
                array_reduce($enrolledCourses, function($carry, $course) {
                    return $carry + ($course['progress'] ?? 0);
                }, 0) / $enrolledCoursesCount : 0;

            // Prepare data for view
            $data = [
                'student' => $student,
                'interests' => $interests,
                'enrolledCourses' => $enrolledCourses,
                'deadlines' => $deadlines,
                'interestedCourses' => $interestedCourses,
                'currentProgramme' => $currentProgramme,
                'modulePrerequisites' => $modulePrerequisites,
                'notifications' => $notifications,
                'interestAnalytics' => $interestAnalytics,
                'recommendedProgrammes' => $recommendedProgrammes,
                'enrolledCoursesCount' => $enrolledCoursesCount,
                'completedCoursesCount' => $completedCoursesCount,
                'overallProgress' => $overallProgress
            ];

            // Extract data to make it available in the view
            extract($data);
            
            require_once BASE_PATH . '/src/views/student/dashboard_new.php';
        } catch (\Exception $e) {
            error_log("Error in viewDashboard: " . $e->getMessage());
            $_SESSION['error'] = "An error occurred while loading the dashboard: " . $e->getMessage();
            header('Location: ' . BASE_URL . '/error');
            exit;
        }
    }
