<?php

namespace App\Controllers;

use App\Models\Student;
use App\Models\Programme;
use App\Models\Module;
use App\Utils\Notification;

require_once __DIR__ . '/../models/Model.php';
require_once __DIR__ . '/../utils/Notification.php';
use App\Models\Model;

class StudentController extends Model {
    private $student;
    private $programme;
    private $module;
    private $notification;

    public function __construct() {
        try {
            parent::__construct();
            $this->student = new Student();
            $this->programme = new Pro    public function viewDashboard() {
        try {
            if (!isset($_SESSION['user_id'])) {
                header('Location: /student-course-hub/auth/login');
                exit;
            }

            $studentId = $_SESSION['user_id'];
            $this->module = new Module();
            $this->notification = new Notification($this->db);
        } catch (\Exception $e) {
            error_log('StudentController initialization error: ' . $e->getMessage());
            $_SESSION['error'] = "An error occurred. Please try again later.";
            header('Location: /student-course-hub/error');
            exit();
        }
    }

    public function registerInterest($courseId, $studentId) {
        try {
            // Validate inputs
            if (!$this->programme->exists($courseId)) {
                throw new Exception("Course not found");
            }

            if (!$this->student->exists($studentId)) {
                throw new Exception("Student not found");
            }

            // Check if already registered
            if ($this->student->hasInterest($studentId, $courseId)) {
                throw new Exception("Already registered interest in this course");
            }

            // Register interest
            return $this->student->addInterest($studentId, $courseId);

        } catch (Exception $e) {
            error_log("Error registering interest: " . $e->getMessage());
            throw new Exception("Failed to register interest: " . $e->getMessage());
        }
    }

    public function withdrawInterest($courseId, $studentId) {
        try {
            if (!$this->student->hasInterest($studentId, $courseId)) {
                throw new Exception("No interest registered for this course");
            }

            return $this->student->removeInterest($studentId, $courseId);

        } catch (Exception $e) {
            error_log("Error withdrawing interest: " . $e->getMessage());
            throw new Exception("Failed to withdraw interest: " . $e->getMessage());
        }
    }

    public function viewCourseDetails($courseId) {
        try {
            $course = $this->programme->findById($courseId);
            
            if (!$course || !$course['is_published']) {
                throw new Exception("Course not found");
            }

            // Enhanced module information
            $course['modules'] = $this->programme->getModules($courseId);
            foreach ($course['modules'] as &$module) {
                $module['shared_programmes'] = $this->module->getSharedProgrammes($module['id']);
                $module['accessibility_features'] = $this->getModuleAccessibilityFeatures($module['id']);
            }
            
            // Get course staff with detailed profiles
            $course['staff'] = $this->programme->getStaffMembers($courseId);
            
            // Add accessibility information
            $course['accessibility'] = [
                'has_transcripts' => true,
                'has_alt_formats' => true,
                'wcag_compliance' => 'AA'
            ];

            return $course;
        } catch (Exception $e) {
            error_log("Error viewing course details: " . $e->getMessage());
            throw new Exception("Failed to retrieve course details");
        }
    }

    public function viewDashboard() {
        try {
            StudentAuthMiddleware::authenticate();
            $studentId = $_SESSION['user_id'];
            
            // Get student details from users table
            $student = $this->student->findById($studentId);
            if (!$student || $student['role'] !== 'student') {
                throw new \Exception("Student not found");
            }

            // Get data with fallbacks for missing functionality
            try {
                $interests = $this->student->getInterests($studentId);
            } catch (\Exception $e) {
                error_log("Error getting interests: " . $e->getMessage());
                $interests = [];
            }

            try {
                $enrolledCourses = $this->student->getEnrolledCourses($studentId);
            } catch (\Exception $e) {
                error_log("Error getting enrolled courses: " . $e->getMessage());
                $enrolledCourses = [];
            }

            try {
                $deadlines = $this->student->getUpcomingDeadlines($studentId);
            } catch (\Exception $e) {
                error_log("Error getting deadlines: " . $e->getMessage());
                $deadlines = [];
            }

            try {
                $interestedCourses = $this->student->getInterestedCourses($studentId);
            } catch (\Exception $e) {
                error_log("Error getting interested courses: " . $e->getMessage());
                $interestedCourses = [];
            }

            // Get optional data with null defaults
            $currentProgramme = $this->getCurrentProgramme($studentId) ?? null;
            $modulePrerequisites = $this->getModulePrerequisites($studentId) ?? [];
            $notifications = $this->notification->getForUser($studentId) ?? [];
            $interestAnalytics = $this->getInterestAnalytics($studentId) ?? [];
            $recommendedProgrammes = method_exists($this->programme, 'getRecommendedProgrammes') ? 
                                   $this->programme->getRecommendedProgrammes($studentId) : [];

            // Prepare data for view
            $data = [
                'student' => $student,
                'interests' => $interests,
                'enrolledCourses' => $enrolledCourses,
                'deadlines' => $deadlines,
                'interestedCourses' => $interestedCourses,
                'currentProgramme' => $currentProgramme,
                'modulePrerequisites' => $modulePrerequisites,
                'notifications' => $notifications,
                'interestAnalytics' => $interestAnalytics,
                'recommendedProgrammes' => $recommendedProgrammes
            ];

            // Extract data to make it available in the view
            extract($data);
            
            require_once BASE_PATH . '/src/views/student/dashboard.php';
        } catch (\Exception $e) {
            error_log("Error in viewDashboard: " . $e->getMessage());
            $_SESSION['error'] = "An error occurred while loading the dashboard: " . $e->getMessage();
            header('Location: ' . BASE_URL . '/error');
            exit;
        }
    }

    public function exploreProgrammes() {
        try {
            StudentAuthMiddleware::authenticate();
            $studentId = $_SESSION['user_id'];
            
            // Get all published programmes
            $programmes = $this->programme->getAllPublished();
            
            // Get student's current interests
            $interests = $this->student->getInterests($studentId);
            
            // Prepare data for view
            $data = [
                'programmes' => $programmes,
                'interests' => $interests
            ];

            // Extract data to make it available in the view
            extract($data);
            
            require_once BASE_PATH . '/src/views/student/explore_programmes.php';
        } catch (\Exception $e) {
            error_log("Error in exploreProgrammes: " . $e->getMessage());
            $_SESSION['error'] = "An error occurred while loading programmes.";
            header('Location: ' . BASE_URL . '/error');
            exit;
        }
    }

    private function calculateCourseProgress($studentId, $courseId) {
        // For now, return a random progress between 0 and 100
        // TODO: Implement actual progress calculation based on completed modules/assignments
        return rand(0, 100);
    }

    public function updatePreferences($studentId, $preferences) {
        try {
            $validPreferences = $this->validatePreferences($preferences);
            
            // Enhanced preferences
            if (isset($validPreferences['accessibility_needs'])) {
                $this->updateAccessibilityPreferences($studentId, $validPreferences['accessibility_needs']);
            }

            if (isset($validPreferences['notification_preferences'])) {
                $this->updateNotificationPreferences($studentId, $validPreferences['notification_preferences']);
            }

            return $this->student->updatePreferences($studentId, $validPreferences);
        } catch (Exception $e) {
            error_log("Error updating preferences: " . $e->getMessage());
            throw new Exception("Failed to update preferences");
        }
    }

    private function getRecommendedCourses($studentId) {
        try {
            // Get student's interested courses
            $interests = $this->student->getInterestedCourses($studentId);
            
            // For now, return empty array until recommendation system is implemented
            return [];
            
            // TODO: Implement actual course recommendations based on interests
            // $recommendedCourses = $this->programme->getRecommendations($interests);
            // return array_slice($recommendedCourses, 0, 5);

        } catch (Exception $e) {
            error_log("Error getting recommendations: " . $e->getMessage());
            return [];
        }
    }

    private function validatePreferences($preferences) {
        $validPreferences = [];
        
        // Enhanced preference validation
        foreach ($preferences as $key => $value) {
            switch ($key) {
                case 'email_notifications':
                    $validPreferences[$key] = filter_var($value, FILTER_VALIDATE_BOOLEAN);
                    break;
                case 'study_level':
                    if (in_array($value, ['undergraduate', 'postgraduate'])) {
                        $validPreferences[$key] = $value;
                    }
                    break;
                case 'accessibility_needs':
                    $validPreferences[$key] = $this->validateAccessibilityNeeds($value);
                    break;
                case 'notification_preferences':
                    $validPreferences[$key] = $this->validateNotificationPreferences($value);
                    break;
            }
        }
        
        return $validPreferences;
    }

    private function getModuleAccessibilityFeatures($moduleId) {
        return [
            'screen_reader_compatible' => true,
            'has_captions' => true,
            'has_transcripts' => true,
            'keyboard_navigable' => true
        ];
    }

    private function validateAccessibilityNeeds($needs) {
        $validNeeds = [];
        $allowedNeeds = ['screen_reader', 'high_contrast', 'keyboard_only', 'captions'];
        
        foreach ($needs as $need) {
            if (in_array($need, $allowedNeeds)) {
                $validNeeds[] = $need;
            }
        }
        
        return $validNeeds;
    }

    private function validateNotificationPreferences($prefs) {
        $validPrefs = [];
        $allowedTypes = ['email', 'sms', 'web'];
        $allowedEvents = ['programme_updates', 'open_days', 'application_deadlines'];
        
        foreach ($prefs as $type => $events) {
            if (in_array($type, $allowedTypes)) {
                $validPrefs[$type] = array_intersect($events, $allowedEvents);
            }
        }
        
        return $validPrefs;
    }

    private function getCurrentProgramme($studentId) {
        try {
            // Get the student's current programme
            $stmt = $this->db->prepare("
                SELECT p.*, 
                       m.id as module_id, 
                       m.title as module_title,
                       m.credits,
                       m.year_of_study,
                       m.semester,
                       u.username as staff_name,
                       u.email as staff_email,
                       NULL as staff_avatar
                FROM programmes p
                JOIN student_programmes sp ON p.id = sp.programme_id
                JOIN programme_modules pm ON p.id = pm.programme_id
                JOIN modules m ON pm.module_id = m.id
                LEFT JOIN users u ON m.staff_id = u.id
                WHERE sp.student_id = ?
                ORDER BY m.year_of_study, m.semester, m.title
            ");
            $stmt->execute([$studentId]);
            
            $programme = null;
            $modules = [];
            $staff = [];
            
            while ($row = $stmt->fetch()) {
                if (!$programme) {
                    $programme = [
                        'id' => $row['id'],
                        'title' => $row['title'],
                        'description' => $row['description'],
                        'level' => $row['level'],
                        'years' => [],
                        'staff' => []
                    ];
                }
                
                $year = $row['year_of_study'];
                $semester = $row['semester'] ?? 1;
                
                if (!isset($programme['years'][$year])) {
                    $programme['years'][$year] = [];
                }
                if (!isset($programme['years'][$year][$semester])) {
                    $programme['years'][$year][$semester] = [];
                }
                
                $programme['years'][$year][$semester][] = [
                    'id' => $row['module_id'],
                    'title' => $row['module_title'],
                    'credits' => $row['credits']
                ];
                
                if ($row['staff_name'] && !isset($staff[$row['staff_name']])) {
                    $staff[$row['staff_name']] = [
                        'name' => $row['staff_name'],
                        'email' => $row['staff_email'],
                        'avatar_url' => $row['staff_avatar'],
                        'role' => 'Module Leader'
                    ];
                }
            }
            
            if ($programme) {
                $programme['staff'] = array_values($staff);
            }
            
            return $programme;
        } catch (Exception $e) {
            error_log("Error getting current programme: " . $e->getMessage());
            return null;
        }
    }

    private function getModulePrerequisites($studentId) {
        try {
            $stmt = $this->db->prepare("
                SELECT m.id, m.title, 
                       GROUP_CONCAT(pm.prerequisite_module_id) as prerequisites
                FROM modules m
                JOIN programme_modules pgm ON m.id = pgm.module_id
                JOIN student_programmes sp ON pgm.programme_id = sp.programme_id
                LEFT JOIN module_prerequisites pm ON m.id = pm.module_id
                WHERE sp.student_id = ?
                GROUP BY m.id
                ORDER BY m.year_of_study, m.semester
            ");
            $stmt->execute([$studentId]);
            
            $modules = [];
            while ($row = $stmt->fetch()) {
                $prerequisites = [];
                if ($row['prerequisites']) {
                    $prereqIds = explode(',', $row['prerequisites']);
                    $prerequisites = $this->getModulesByIds($prereqIds);
                }
                
                $modules[] = [
                    'id' => $row['id'],
                    'title' => $row['title'],
                    'prerequisites' => $prerequisites
                ];
            }
            
            return $modules;
        } catch (Exception $e) {
            error_log("Error getting module prerequisites: " . $e->getMessage());
            return [];
        }
    }

    private function getStudentNotifications($studentId) {
        try {
            return $this->notification->getStudentNotifications($studentId);
        } catch (Exception $e) {
            error_log("Error getting notifications: " . $e->getMessage());
            return [];
        }
    }

    private function getInterestAnalytics($studentId) {
        try {
            // Get total interests registered
            $stmt = $this->db->prepare("
                SELECT COUNT(*) as total_interests
                FROM student_interests
                WHERE student_id = ?
            ");
            $stmt->execute([$studentId]);
            $totalInterests = $stmt->fetchColumn();

            // Get interests by programme level
            $stmt = $this->db->prepare("
                SELECT p.level, COUNT(*) as count
                FROM student_interests si
                JOIN programmes p ON si.programme_id = p.id
                WHERE si.student_id = ?
                GROUP BY p.level
            ");
            $stmt->execute([$studentId]);
            $interestsByLevel = $stmt->fetchAll();

            $analytics = [
                [
                    'label' => 'Total Interests',
                    'value' => $totalInterests
                ]
            ];

            foreach ($interestsByLevel as $interest) {
                $analytics[] = [
                    'label' => ucfirst($interest['level']) . ' Programmes',
                    'value' => $interest['count']
                ];
            }

            return $analytics;
        } catch (Exception $e) {
            error_log("Error getting interest analytics: " . $e->getMessage());
            return [];
        }
    }

    private function getModulesByIds($moduleIds) {
        $placeholders = str_repeat('?,', count($moduleIds) - 1) . '?';
        $stmt = $this->db->prepare("
            SELECT id, title 
            FROM modules 
            WHERE id IN ($placeholders)
        ");
        $stmt->execute($moduleIds);
        return $stmt->fetchAll();
    }

    public function browseProgrammes($query = null, $filters = []) {
        try {
            // Get filtered and searched programmes
            $programmes = $this->programme->searchProgrammes($query, $filters);
            
            // Enhance each programme with additional information
            foreach ($programmes as &$prog) {
                // Get total number of staff
                $prog['staff_count'] = count($this->programme->getStaffMembers($prog['id']));
                
                // Get level-specific information
                if ($prog['level'] === 'undergraduate') {
                    $prog['duration'] = '3-4 years';
                    $prog['qualification'] = 'Bachelor\'s Degree';
                } else {
                    $prog['duration'] = '1-2 years';
                    $prog['qualification'] = 'Master\'s Degree';
                }
            }
            
            return [
                'programmes' => $programmes,
                'total' => count($programmes),
                'filters' => $filters,
                'query' => $query
            ];
            
        } catch (\Exception $e) {
            error_log("Error browsing programmes: " . $e->getMessage());
            throw new \Exception("Failed to retrieve programmes");
        }
    }

    public function getProgrammeStructure($programmeId) {
        try {
            // Validate programme exists
            if (!$this->programme->exists($programmeId)) {
                throw new \Exception("Programme not found");
            }
            
            // Get detailed programme structure
            $structure = $this->programme->getProgrammeStructure($programmeId);
            
            // Get programme details
            $details = $this->programme->findById($programmeId);
            
            return [
                'programme' => $details,
                'structure' => $structure,
                'total_credits' => $this->calculateTotalCredits($structure)
            ];
            
        } catch (\Exception $e) {
            error_log("Error getting programme structure: " . $e->getMessage());
            throw new \Exception("Failed to retrieve programme structure");
        }
    }

    private function calculateTotalCredits($structure) {
        $total = 0;
        foreach ($structure as $year) {
            foreach ($year as $semester) {
                foreach ($semester as $module) {
                    $total += $module['credits'];
                }
            }
        }
        return $total;
    }



    public function viewInterests() {
        try {
            // Check if user is logged in
            if (!isset($_SESSION['user_id'])) {
                header('Location: ' . BASE_URL . '/auth/login');
                exit;
            }

            $studentId = $_SESSION['user_id'];
            
            // Get student's interests with detailed programme information
            $interests = $this->student->getInterests($studentId);
            
            // Get all available programmes for comparison
            $allProgrammes = $this->programme->getAllPublished();
            
            // Prepare data for view
            $data = [
                'interests' => $interests,
                'allProgrammes' => $allProgrammes
            ];

            // Extract data to make it available in the view
            extract($data);
            
            require_once BASE_PATH . '/src/views/student/manage_interests.php';
        } catch (\Exception $e) {
            error_log("Error in viewInterests: " . $e->getMessage());
            $_SESSION['error'] = "An error occurred while loading your interests.";
            header('Location: ' . BASE_URL . '/error');
            exit;
        }
    }
}
